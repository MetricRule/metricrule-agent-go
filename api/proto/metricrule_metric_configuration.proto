syntax = "proto3";

package metricrule.agent.go.api;

option go_package = "github.com/metricrule-agent-go/api/proto/metricconfigpb";

message SidecarConfig {    
    // Configuration for the data from the input tensor to record as metrics.
    // Each entry represents a separate metric.
    // Optional. If empty, no input data is recorded as metrics.
    repeated MetricConfig input_metrics = 1;
    
    // Configuration for the data from the output to record as metrics.
    // Each entry represents a separate metric.
    // Optional. If empty, no output data is recorded as metrics.
    repeated MetricConfig output_metrics = 2;

    // Configuration for labels parsed from the input data to be attached
    // to all metrics (input and output).
    repeated LabelConfig context_labels_from_input = 3;

    // Configuration to filter received input payload before processing metrics.
    // Optional. If empty, the full input payload is considered.
    // This should be in JSONPath format https://goessner.net/articles/JsonPath/.
    // All metric paths (e.g ParsedValue.field_path) will be evaluated relative 
    // to the result of the filter.
    // This can also be used to 'split' batch inputs. For example, for KFServing
    // use ".instances" for each instance to be evaluated independently.
    string input_content_filter = 4;

    // Configuration to filter received output payload before processing metrics.
    // Optional. If empty, the full output payload is considered.
    // This should be in JSONPath format https://goessner.net/articles/JsonPath/.
    // All metric paths (e.g ParsedValue.field_path) will be evaluated relative 
    // to the result of the filter.
    // This can also be used to 'split' batch outputs. For example, for KFServing
    // use ".predictions" for each instance to be evaluated independently.
    string output_content_filter = 5;
}

// Configures a metric from either the input or output of the serving API.
message MetricConfig {
    // Name of the metric. Required.
    // This should be a snake_case string in all lowers.
    // The unit of the metric should be clearly specified.
    // e.g "output_prediction_time_to_respond_seconds"
    string name = 1;

    // Labels associated with this metric. Optional.
    repeated LabelConfig labels = 2;

    // Required. The type of metric to record.
    oneof metric {
        SimpleCounterMetric simple_counter = 100;

        ValueMetric value = 101;
    }
}

// A simple counter that increments by one for each matching instance.
message SimpleCounterMetric {}

// A metric that tracks dynamic values (e.g to build a histogram)
message ValueMetric {
    ValueConfig value = 1;
}

// A key and value to associate with each metric.
// See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#labels
message LabelConfig {
    ValueConfig label_key = 1;

    ValueConfig label_value = 2;
}

// Configuration for the value to fill in the metric.
// In order of reduced precedence (e.g if both parsed_value and static_value are present,
// parsed_value will take precedence)
message ValueConfig {
    // Optional. A value to be parsed from the application payload.
    ParsedValue parsed_value = 1;    

    // Optional. A single configured value.
    oneof static_value {
        string string_value = 100;

        int64 integer_value = 101;

        float float_value = 102;
    }
}

message ParsedValue {
    // The path from the root message (e.g request or response) to
    // retrieve the value.
    // This should be in JSONPath format.
    // https://goessner.net/articles/JsonPath/.
    // e.g for json {f: {a: [1], b: 0}} to refer to 1, use `".f.a[0]"`
    // or `"$.f.a[0]"`.
    // Only a single JSON path expression should be provided.
    // The path should point to a single JSON value (not an array or 
    // object) matching the specified parsed_type.
    string field_path = 1;

    // The type to parse the value as.
    enum ParsedType {
        UNKNOWN = 0;
        STRING = 1;
        INTEGER = 2;
        FLOAT = 3;
    }
    ParsedType parsed_type = 2;
}